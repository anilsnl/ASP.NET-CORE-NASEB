// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using NASEB.Library.DAL.Concrete.EF;
using NASEB.Library.Entities.Concrete;
using System;

namespace NASEB.Library.MVCWebUI.Migrations
{
    [DbContext(typeof(NASEBLibraryDbContext))]
    [Migration("20180428134929_RentHistoryUpdatedV3")]
    partial class RentHistoryUpdatedV3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NASEB.Library.Entities.Concrete.Author", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("AuthorID");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("NASEB.Library.Entities.Concrete.AuthorBooks", b =>
                {
                    b.Property<int>("AuthorID");

                    b.Property<int>("BookID");

                    b.HasKey("AuthorID", "BookID");

                    b.HasIndex("BookID");

                    b.ToTable("AuthorBooks");
                });

            modelBuilder.Entity("NASEB.Library.Entities.Concrete.Book", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AvailableQuantity");

                    b.Property<string>("BookName")
                        .IsRequired();

                    b.Property<string>("BookSummary")
                        .HasMaxLength(2000);

                    b.Property<int>("BookTypeID");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("Location")
                        .HasMaxLength(10);

                    b.Property<DateTime>("PublishDate");

                    b.Property<int>("PublisherID");

                    b.Property<int>("SayfaSayısı");

                    b.Property<int>("TotalQuantity");

                    b.HasKey("BookID");

                    b.HasIndex("BookTypeID");

                    b.HasIndex("PublisherID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("NASEB.Library.Entities.Concrete.BookType", b =>
                {
                    b.Property<int>("BookTypeID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("BookTypeID");

                    b.ToTable("BookTypes");
                });

            modelBuilder.Entity("NASEB.Library.Entities.Concrete.Member", b =>
                {
                    b.Property<int>("MemberID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(150);

                    b.Property<bool>("AwaableToRent");

                    b.Property<DateTime>("BirthDate");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("RemainedRentConut");

                    b.Property<int>("Status");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("TRIDNo");

                    b.Property<int>("TotalRentConut");

                    b.Property<int>("UserID");

                    b.Property<bool>("isAddressVerified");

                    b.Property<bool>("isEMailVerified");

                    b.Property<bool>("isPhoneNumberVerified");

                    b.Property<bool>("isTRCitezen");

                    b.Property<bool>("isTRIDCitizenVerfied");

                    b.HasKey("MemberID");

                    b.HasIndex("TRIDNo")
                        .IsUnique();

                    b.HasIndex("UserID");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("NASEB.Library.Entities.Concrete.Publisher", b =>
                {
                    b.Property<int>("PublisherID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("PublisherID");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("NASEB.Library.Entities.Concrete.RentHistory", b =>
                {
                    b.Property<int>("RentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BookID");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<double>("DelayFine");

                    b.Property<int>("DelayedDayCount");

                    b.Property<DateTime?>("DeliveredDate");

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<int>("MemberID");

                    b.Property<DateTime>("RentDate");

                    b.Property<DateTime>("RentEndDate");

                    b.Property<int>("UserID");

                    b.Property<bool>("isDelayed");

                    b.Property<bool>("isRentingCompleted");

                    b.HasKey("RentID");

                    b.HasIndex("BookID");

                    b.HasIndex("MemberID");

                    b.HasIndex("UserID");

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("NASEB.Library.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("NASEB.Library.Entities.Concrete.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("LastUpdatedDate");

                    b.Property<string>("NameSurname")
                        .IsRequired();

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NASEB.Library.Entities.Concrete.UserRoles", b =>
                {
                    b.Property<int>("UserID");

                    b.Property<int>("RoleID");

                    b.HasKey("UserID", "RoleID");

                    b.HasIndex("RoleID");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("NASEB.Library.Entities.Concrete.UserToken", b =>
                {
                    b.Property<Guid>("TokenID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("TimeOutDate");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("TokenType");

                    b.Property<DateTime>("UseStartDate");

                    b.Property<int>("UserID");

                    b.Property<bool>("isUsed");

                    b.HasKey("TokenID");

                    b.HasIndex("UserID");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("NASEB.Library.Entities.Concrete.AuthorBooks", b =>
                {
                    b.HasOne("NASEB.Library.Entities.Concrete.Author", "Author")
                        .WithMany("AuthorBookses")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NASEB.Library.Entities.Concrete.Book", "Book")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NASEB.Library.Entities.Concrete.Book", b =>
                {
                    b.HasOne("NASEB.Library.Entities.Concrete.BookType", "BookType")
                        .WithMany("Books")
                        .HasForeignKey("BookTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NASEB.Library.Entities.Concrete.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NASEB.Library.Entities.Concrete.Member", b =>
                {
                    b.HasOne("NASEB.Library.Entities.Concrete.User", "User")
                        .WithMany("Members")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NASEB.Library.Entities.Concrete.RentHistory", b =>
                {
                    b.HasOne("NASEB.Library.Entities.Concrete.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NASEB.Library.Entities.Concrete.Member", "Member")
                        .WithMany("Rents")
                        .HasForeignKey("MemberID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NASEB.Library.Entities.Concrete.User", "User")
                        .WithMany("Rents")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NASEB.Library.Entities.Concrete.UserRoles", b =>
                {
                    b.HasOne("NASEB.Library.Entities.Concrete.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NASEB.Library.Entities.Concrete.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NASEB.Library.Entities.Concrete.UserToken", b =>
                {
                    b.HasOne("NASEB.Library.Entities.Concrete.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
